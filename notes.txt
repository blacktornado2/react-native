- React Native is an open source framework for building Android and iOS applications using React and the app platformâ€™s native capabilities.

- Development -> Physical/Real device OR Emulator(Android)/Simulator(iOS)
- On MacOS, we can have both Android Studio and XCode, but on Windows, we cannot have XCode

- React native benefits:
  -> Single Codebase(Cross-platform compatibility)
  -> Native component support
  -> Hot reloading(changes reflect in real-time)
  -> Development faster(don't have to rebuild whole app again & again)
  -> Strong community support

- React native is used by these apps:
  -> Facebook(Meta)
  -> Messenger(Meta)
  -> Microsoft Outlook
  -> Microsoft teams
  -> Shopify
  -> Flipkart
  -> Discord

- Core Components(<View>, <Text>, <Image>, <FlatList>, etc.)
  -> They are abstractions over native platform components
  -> Written in JS, but render to native components, simplifies dev. by hiding platform specific complexities
  -> Cross-platform by design, Provides consitent behavior accross platforms
  -> Invokes Native components at run-time

- Native components(Android: ViewGroup, ImageView, TextView ; iOS: UIView, UIIMageView, UITextView)
  -> Custom components written in native languages(Swift, Java, Kotlin) and exposed to RN
  -> Access to low-level system APIs(bluetooth/nfc), advanced native features
  -> Platform specific by nature, optimized performance for complex tasks or rendering

- Custom components: components created by us, using various core components

- Components are compiled:

- Views are compiled (i.e. the JSX code/components), and not the JS logic

  Browser                    Android               ios                 react-native JSX
  <div>                 -   <ViewGroup>     -     <UIView>        -        <View>
  <p>                   -   <TextView>      -   <UITextView>      -        <Text>
  <input type="text">   -   <EditText>      -   <UITextField>     -      <TextInput>  
  <img>                 -   <ImageView>     -   <UIImageView>     -        <Image>

- React Native maps(and compiles) reusable components to respective platform equivalents(native views)
- Logic(JS) runs on a JS thread, hosted by RN (in the app)

- Styling: There is no CSS in react-native. Use either use Inline styles or StyleSheet Objects
  1. give a style prop to component, a plain old JS object
  2. StyleSheet.create({}) (preferred because it includes validation in style)
  -> Style names are written in camel casing
  -> 'style' prop can be an object or an array of styles(objects), the last style in the array has precedence
  -> All dimensions in React Native are unitless, and represent density-independent pixels.

- Props: properties, used for customizing the child component, child component shouldn't change props directly
- State: component's personal data storage, component can modify it
  -> We can add state using useState hook
  -> If the state changes, component will re-render
  -> state of one component, can be props to another component
  -> We never directyl modify state variable, we  modify it using the setter function
- Hook: It is a function that lets you use React features. ex: useState, useEffect

- React component file mainly consists of 4 parts:
  1. Import libraries - we need to create a componentf
  2. Create a component - a function that returns some JSX
  3. Create a stylesheet - to style our component/import stylesheet
  4. Export the component

NativeWind allows us to write TailwindCSS like syntax in our React-Native app

-------------------------------------------- COMPONENTS --------------------------------------------

- Text : just like p and h* tags in HTML, display text

- View : container, used to create layout structures for other components, uses flexbox by default(by-default flex-direction is column in react-native), props: hitSlop, style, 

- Buttons
  -> <Button/>: very simple component for showing a native button and detecting a press(Not very customisable), props: title, onPress, color, 

- Touchables: can capture tapping and gestures, no default styling
  1. <TouchableOpacity>: Highly customisable component that can detect a press on just about any kind of element
  2. <TouchableWithoutFeedback>
  3. <TouchableHighlight>

- TextInput
  -> Allows user to enter text
  -> props: onChangeText, onSubmitEditing, defaultValue, placeholder(we will see when there is no text)

- ScrollView
  -> generic scrolling container, we cannot scroll if we use <View> and the page is full of content
  -> can be scrolled horizontally or vertically(by-default)
  -> props: horizontal, pagingEnabled
  -> disadavantage: all the elements and views of a ScrollView are rendered, even if they are not currently shown on the screen

- Building list with react: .map(), FlatList, SectionList
- FlatList
  -> Turns an array into a list of elements, creates a scrollable list
  -> Unlike Scrollview, FlatList only renders elements that are currently showing on the screen, not all the elements at once.
  -> required props: 'data'(array) and 'renderItem'(function that returns JSX element)
  -> Comparing with React.js, we might be used to mapping an array of data to build a list - FlatList is better with RN
  -> without a keyExtractor prop: react-native deletes the whole list and rebuild the new list with updated data
  -> with a keyExtractor prop: react-native only updates the data which needs to be updated(performance optimisation)
  -> other props: horizontal, showsHorizontalScrollIndicator, 

- SectionList
  -> If we want to render a set of data broken into logical sections, maybe with section headers
  -> props: 'sections'(array), 'renderItem'(function that returns JSX), 'renderSectionHeader'(function to return JSX element)
  -> 

- ActivityIndicator
  -> show loader(spinner), customise size and color

- Images
  1. Static Image Resource: <Image source={require('./my-icon.png')} />
  2. Network Images: <Image source={{uri: 'https://reactjs.org/logo-og.png'}} style={{height: 200, width: 300}} />

- ImageBackground
  -> Used when we want to use an image as background

-------------------------------------------- HOOKS --------------------------------------------

useColorScheme is a hook in react-native which returns 'light'/'dark'/null based on the current user preferred color scheme

-------------------------------------------- NAVIGATION --------------------------------------------

Types of navigation:
1. Stack Navigation (for moving between screens)
2. Tab Navigation (for bottom or top tabs)
3. Drawer Navigation (for side menu)
4. Nested Navigation (combining navigators)

-> Stack Navigation
- Snippet:

App.js

import { createStackNavigator } from '@react-navigation/stack';
import { NavigationContainer } from '@react-navigation/native';

import HomeScreen from './HomeScreen';
import DetailsScreen from './DetailsScreen';

const Stack = createStackNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="Details" component={DetailsScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

HomeScreen.js

import { View, Text, Button } from 'react-native';
import React from 'react';

const HomeScreen = ({ navigation }) => {
  return (
    <View>
      <Text>HomeScreen</Text>
      <Button title='Go to Details' onPress={() => navigation.navigate('Details')} />
    </View>
  );
};

export default HomeScreen;

- We can customise header of a Stack navigator by using the "options" prop(in <Stack.Screen />)

- We can pass data from one screen to other
- Snippet:
  navigation.navigate('Details', { userId: 42 });
  const { userId } = route.params;

-------------------------------------------- MISC. --------------------------------------------

- Flexbox
  -> A view is by-default flexbox, with flexDirection set to 'column'

- Platform specific code
  1. Platform module: ex: import {Platform} from 'react-native'; Platform.OS => 'android', 'ios', 
  2. Platform specific extension: make different files, ex: BigButton.ios.js, BigButton.android.js , RN will detect the file and load accordingly

-------------------------------------------- FILE AND FOLDER STRUCTURE --------------------------------------------
1.
 -src
    |--- assets(animations, fonts, images)
    |--- components
    |--- constants
    |--- hooks
    |--- navigations
    |--- screens
    |--- types
    |--- utils(api, authorize)
    |--- redux

-------------------------------------------- INSTALLATION --------------------------------------------

  1. Windows
  Node.js
  Java11(Openjdk) (can install using chocolatey)
  Android Studio & Android SDK
  Setup PATH(environment variable) of JAVA_HOME, ANDOIRD_SDK_ROOT(ANDROID_HOME), android platform tools
  (There are two methods of setting environment variable: set direct variable(key-value pair) or set it's value in path)
  Download atleast 2 versions of android in android studio sdk manager

  Resource:

  Misc.
  chocolatey is a package manager for windows